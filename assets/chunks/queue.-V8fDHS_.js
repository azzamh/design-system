var r=Object.defineProperty;var h=(n,e,u)=>e in n?r(n,e,{enumerable:!0,configurable:!0,writable:!0,value:u}):n[e]=u;var t=(n,e,u)=>(h(n,typeof e!="symbol"?e+"":e,u),u);class q{constructor(){t(this,"queue");t(this,"running");this.queue=[],this.running=!1}enqueue(e){this.queue.push(e)}dequeue(){return this.queue.shift()}async add(e){return await new Promise((u,s)=>{const i={resolve:u,reject:s,run:e};this.enqueue(i),this.run()})}run(){if(this.queue.length>0&&!this.running){this.running=!0;const e=this.dequeue();e.run().then(e.resolve).catch(e.reject).finally(()=>{this.running=!1,this.run()})}}}export{q as Q};
